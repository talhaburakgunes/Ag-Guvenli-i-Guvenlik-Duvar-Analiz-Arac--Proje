from flask import Flask, request, jsonify

app = Flask(__name__)

# Tarama fonksiyonu
def analiz_yap(hedef_ip, port_araligi, kural_veritabani="IETF", ozelleştirilmis_modul=False, detay_seviyesi="orta"):
    # Gerçek tarama yerine statik örnek veri döneceğiz
    sonuc = {
        "ip_adresi": hedef_ip,
        "portlar": [
            {"port_numarasi": 80, "port_durumu": "açık"},
            {"port_numarasi": 443, "port_durumu": "kapalı"}
        ],
        "bypass_teknikleri": [
            {
                "teknik_adi": "TCP FIN Scan",
                "risk_puanı": "yüksek",
                "detaylar": "Bu teknik, firewall güvenlik önlemlerini atlatabilir."
            }
        ],
        "yapilandirma_uyarilari": [
            {
                "uyari_mesaji": "Açık portlar tespit edildi. Güvenlik riski oluşturabilir.",
                "kritik_seviye": "yüksek"
            }
        ]
    }
    return sonuc

# API endpoint
@app.route('/analiz', methods=['POST'])
def analiz():
    # Kullanıcıdan gelen JSON verisini al
    data = request.get_json()

    try:
        # Zorunlu parametreler
        hedef_ip = data['hedef_ip']
        port_araligi = data['port_araligi']
        
        # Opsiyonel parametreler
        kural_veritabani = data.get('kural_veritabani', 'IETF')
        ozelleştirilmis_modul = data.get('ozelleştirilmis_modul', False)
        detay_seviyesi = data.get('detay_seviyesi', 'orta')

        # Tarama analizini başlat
        analiz_sonucu = analiz_yap(hedef_ip, port_araligi, kural_veritabani, ozelleştirilmis_modul, detay_seviyesi)

        # Başarıyla tamamlanan analiz sonucunu döndür
        return jsonify({
            "sonuç": {
                "durum": "başarılı",
                "veri": analiz_sonucu,
                "hata_mesajı": ""
            }
        })
    except Exception as e:
        # Hata durumu
        return jsonify({
            "sonuç": {
                "durum": "başarısız",
                "veri": {},
                "hata_mesajı": str(e)
            }
        })

if __name__ == '__main__':
    app.run(debug=True)
